# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: School backend ci cd

on:
  push:
    branches: [ "main", "develop", "staging" ]
  pull_request:
    branches: [ "main", "develop", "staging" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn clean install # To skip tests : -Dmaven.test.skip=true

    - name: Build & Push Docker Image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: vincediegane/demo-app
        tags: latest
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Generate docker compose file
        if: ${{ github.ref != 'refs/heads/main' }}
        env:
          ENV_SUFFIX: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || github.ref == 'refs/heads/staging' && 'staging' }}
          REGISTRY: ${{ secrets.REGISTRY }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        run: |
          echo "Generating docker compose file ..."
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem
          ssh -o StrictHostKeyChecking=no -i /tmp/private_key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'

          cat <<EOF >docker-compose.yml
          version: '3.7'
          
          services:
            school-backend:
              image: "${{ env.REGISTRY }}:latest"
              environment:
                USER: "postgres"
                PASSWORD: "${{ env.DATABASE_PASSWORD }}"
                HOST: "${{ env.DATABASE_HOST }}"
              ports:
                - "8080:8080"
          EOF
          if [ -f docker-compose.yml ]; then
            sudo docker compose down
            sudo docker compose pull
            sudo docker compose up -d
          else
            echo "Docker-compose file does not exist."
          fi

      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2 instance ..."
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem
          ssh -o StrictHostKeyChecking=no -i /tmp/private_key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            sudo docker compose -f docker-compose.yml down
            sudo docker compose -f docker-compose.yml pull
            sudo docker compose -f docker-compose.yml up -d
#            if [ -f docker-compose.yml ]; then
#              sudo docker compose down
#              sudo docker compose pull
#              sudo docker compose up -d
#            else
#              echo "Docker-compose file does not exist."
#            fi

          EOF